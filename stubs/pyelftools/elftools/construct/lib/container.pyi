from _typeshed import Incomplete

from .py3compat import MutableMapping

def recursion_lock(retval, lock_name: str = "__recursion_lock__"): ...

class Container(MutableMapping):
    __dict__: Incomplete
    def __init__(self, **kw) -> None: ...
    def __getitem__(self, name): ...
    def __delitem__(self, name) -> None: ...
    def __setitem__(self, name, value) -> None: ...
    def keys(self): ...
    def __len__(self) -> int: ...
    def update(self, other) -> None: ...
    __update__ = update
    def __contains__(self, value) -> bool: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def copy(self): ...
    __copy__ = copy
    def __iter__(self): ...

class FlagsContainer(Container): ...
class ListContainer(list): ...

class LazyContainer:
    subcon: Incomplete
    stream: Incomplete
    pos: Incomplete
    context: Incomplete
    def __init__(self, subcon, stream, pos, context) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __pretty_str__(self, nesting: int = 1, indentation: str = "    "): ...
    def read(self): ...
    def dispose(self) -> None: ...
    value: Incomplete
    has_value: Incomplete
