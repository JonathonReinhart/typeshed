from _typeshed import Incomplete
from collections.abc import Generator
from typing import NamedTuple

from .enums import ENUM_D_TAG as ENUM_D_TAG
from .sections import Section

class Relocation:
    entry: Incomplete
    elffile: Incomplete
    def __init__(self, entry, elffile) -> None: ...
    def is_RELA(self): ...
    def __getitem__(self, name): ...

class RelocationTable:
    entry_struct: Incomplete
    entry_size: Incomplete
    def __init__(self, elffile, offset, size, is_rela) -> None: ...
    def is_RELA(self): ...
    def num_relocations(self): ...
    def get_relocation(self, n): ...
    def iter_relocations(self) -> Generator[Incomplete, None, None]: ...

class RelocationSection(Section, RelocationTable):
    def __init__(self, header, name, elffile) -> None: ...

class RelrRelocationSection(Section):
    def __init__(self, header, name, elffile) -> None: ...
    def iter_relocations(self) -> Generator[Incomplete, None, None]: ...
    def num_relocations(self): ...
    def get_relocation(self, n): ...

class RelocationHandler:
    elffile: Incomplete
    def __init__(self, elffile) -> None: ...
    def find_relocations_for_section(self, section): ...
    def apply_section_relocations(self, stream, reloc_section) -> None: ...

    class _RELOCATION_RECIPE_TYPE(NamedTuple):
        bytesize: Incomplete
        has_addend: Incomplete
        calc_func: Incomplete
